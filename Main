from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QFileDialog, QWidget, QPushButton, QHBoxLayout, QVBoxLayout, QMessageBox, QRadioButton, QLabel, QTextEdit, QLineEdit, QListWidget, QInputDialog, QFormLayout
from PyQt5.QtGui import QPixmap
import os
from PIL import Image, ImageFilter, ImageEnhance
from PIL.ImageFilter import SHARPEN

app = QApplication([])
win = QWidget()
win.setWindowTitle('Easy Editor')
list_pictures = QListWidget()
list_pictures_label = QLabel('Picture')

workdir = ''
#---------------------------------------------------------------------------------------------
def filter(files, extensions):
    result = list()
    for filename in files:
        for extension in extensions:
            if filename.endswith(extension):
                result.append(filename)
    return result

def chooseWorkDir():
    global workdir
    workdir = QFileDialog.getExistingDirectory()

def showFilenamesList():
    workdir = QFileDialog.getExistingDirectory()
    extensions = ['.jpg','.jpeg','.png','.gif','.bap']
    chooseWorkDir()
    files = os.listdir(workdir)
    filenames = filter(files, extensions)
    list_pictures_label.clear()
    for filename in filenames:
        list_pictures.addItem(filename)

def showChosenImage():
    if list_pictures.currentRow() >=0:
        filename = list_pictures.currentItem().text()
        workimage.loadImage(filename)
        image_path = os.path.join(workdir, workimage.filename)
        workimage.showImage(image_path)
#---------------------------------------------------------------------------------------------
class ImageProcessor():
    def __init__(self):
        self.image = None
        self.dir = None
        self.filename = None
        self.save_dir = 'save/'

    def loadImage(self, filename):
        self.filename = filename
        image_path = os.path.join(workdir, filename)
        self.image = Image.open(image_path)

    def showImage(self, path):
        list_pictures_label.hide()
        pixmapimage = QPixmap(path)
        w, h = list_pictures.width(), list_pictures.height()
        pixmapimage = pixmapimage.scaled(w, h, Qt.KeepAspectRatio)
        list_pictures_label.setPixmap(pixmapimage)
        list_pictures_label.show()

    def saveImage(self):
        path = os.path.join(workdir, self.save_dir)
        if not(os.path.exists(path) or os.path.isdir(path)):
            os.mkdir(path)
        image_path = os.path.join(path, self.filename)
        self.image.save(image_path)

    def do_bw(self):
        self.image = self.image.convert('L')
        self.saveImage()
        image_path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(image_path)

    def do_mirrow(self):
        self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
        self.saveImage()
        image_path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(image_path)

    def do_right(self):
        self.image = self.image.transpose(Image.ROTATE_90)
        self.saveImage()
        image_path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(image_path)

    def do_left(self):
        self.image = self.image.transpose(Image.ROTATE_270)
        self.saveImage()
        image_path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(image_path)

    def do_contr(self):
        self.image = self.image.filter(SHARPEN)
        self.saveImage()
        image_path = os.path.join(workdir, self.save_dir, self.filename)
        self.showImage(image_path)
#---------------------------------------------------------------------------------------------
btn_dir = QPushButton('Folder')
btn_left = QPushButton('Left')
btn_right = QPushButton('Right')
btn_mirrow = QPushButton('Mirrow')
btn_contr = QPushButton('Contrast')
btn_bw = QPushButton('B/W')

workimage = ImageProcessor()

btn_dir.clicked.connect(showFilenamesList)
btn_bw.clicked.connect(workimage.do_bw)
btn_mirrow.clicked.connect(workimage.do_mirrow)
btn_left.clicked.connect(workimage.do_left)
btn_right.clicked.connect(workimage.do_right)
btn_contr.clicked.connect(workimage.do_contr)
list_pictures.currentRowChanged.connect(showChosenImage)

win.resize(700, 400)

row = QHBoxLayout()
col_1 = QVBoxLayout()
col_1.addWidget(btn_dir)
col_1.addWidget(list_pictures)

col_2 = QHBoxLayout()
col_2.addWidget(btn_left)
col_2.addWidget(btn_right)
col_2.addWidget(btn_mirrow)
col_2.addWidget(btn_contr)
col_2.addWidget(btn_bw)
col_3 = QVBoxLayout()
col_3.addWidget(list_pictures_label)
col_3.addLayout(col_2)

row.addLayout(col_1)
row.addLayout(col_3)


win.setLayout(row)
win.show()
app.exec()
